AWSTemplateFormatVersion: '2010-09-09'
Description: 'MADS jupyter hub deployment'
# TO DO: Add ELB to default deployment.
Parameters:

  Tag:
    Type: String
    Description: Tag to identify cluster

  VpcId:
    Type: String
    Description: Id of the Vpc to deploy cluster to

  Subnet01Id:
    Type: String
    Description: Id of subnet 01

  Subnet02Id:
    Type: String
    Description: Id of subnet 02

  Subnet03Id:
    Type: String
    Description: Id of subnet 03

  BillingTag:
    Type: String
    Description: Tag used for billing monitoring
    Default: jupyterhub

  ScriptBucket:
    Type: String
    Description: Bucket that stores startup scripts used by Cluster instances

  ControlNodeSecurityGroup:
    Type: AWS::EC2::SecurityGroup::Id
    Description: Security groud of control node

  DefaultAlbForwardPortHttp:
    Type: String
    Description: Default port to forward http traffic to on the nodes
    Default: 30254

  DefaultAlbForwardPortHttps:
    Type: String
    Description: Default port to forward https traffic to on the nodes
    Default: 30255

  ScaleOutPolicyTargetValue:
    Type: Number
    Description: Target average cpu utilization for cluster nodes
    Default: 60

  KeyName:
    Description: The EC2 Key Pair to allow SSH access to the master and node instances
    Type: AWS::EC2::KeyPair::KeyName

  NodeImageId:
    Type: AWS::EC2::Image::Id
    Description: AMI id for the node instances.
    Default: "ami-0c385d0d99fce057d"

  NodeInstanceType:
    Description: EC2 instance type for the node instances
    Type: String
    Default: t3.xlarge

  NodeInstanceMem:
    Description: EC2 instance memory (in Gb)
    Type: Number
    Default: 16

  UserPodMem:
    Description: Amount of memory to assign to each user pod
    Type: Number
    Default: 4

  DesiredPodBuffer:
    Description: Amount of pods on standby ready to take users
    Type: Number
    Default: 1

  NodeAutoScalingGroupMinSize:
    Type: Number
    Description: Minimum size of Node Group ASG.
    Default: 1

  NodeAutoScalingGroupMaxSize:
    Type: Number
    Description: Maximum size of Node Group ASG. Set to at least 1 greater than NodeAutoScalingGroupDesiredCapacity.
    Default: 4

  NodeAutoScalingGroupDesiredCapacity:
    Type: Number
    Description: Desired capacity of Node Group ASG.
    Default: 1

  NodeVolumeSize:
    Type: Number
    Description: Node volume size
    Default: 100

  BootstrapArguments:
    Description: Arguments to pass to the bootstrap script. See files/bootstrap.sh in https://github.com/awslabs/amazon-eks-ami
    Default: ""
    Type: String

Resources:

  EFS:
    Type: AWS::EFS::FileSystem
    DeletionPolicy: Retain
    Properties:
      FileSystemTags:
        - Key: Name
          Value: !Sub umsi-easy-hub-${Tag}-efs

  Subnet01EfsMountTarget:
    Type: AWS::EFS::MountTarget
    Properties:
      FileSystemId:
        Ref: EFS
      SubnetId:
        Ref: Subnet01Id
      SecurityGroups:
        - Ref: ControlNodeSecurityGroup
        - Ref: NodeSecurityGroup

  Subnet02EfsMountTarget:
    Type: AWS::EFS::MountTarget
    Properties:
      FileSystemId:
        Ref: EFS
      SubnetId:
        Ref: Subnet02Id
      SecurityGroups:
        - Ref: ControlNodeSecurityGroup
        - Ref: NodeSecurityGroup

  Subnet03EfsMountTarget:
    Type: AWS::EFS::MountTarget
    Properties:
      FileSystemId:
        Ref: EFS
      SubnetId:
        Ref: Subnet03Id
      SecurityGroups:
        - Ref: ControlNodeSecurityGroup
        - Ref: NodeSecurityGroup

  AlbSg:
    Type: AWS::EC2::SecurityGroup
    Properties:
      VpcId: !Ref VpcId
      GroupDescription: Security group for master elastic load balancer
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 443
        ToPort: 443
        CidrIp: 0.0.0.0/0
      - IpProtocol: tcp
        FromPort: 80
        ToPort: 80
        CidrIp: 0.0.0.0/0
      SecurityGroupEgress:
      - IpProtocol: -1
        FromPort: 0
        ToPort: 65535
        CidrIp: 0.0.0.0/0

  # AlbListenerHttps:
  #   Type: AWS::ElasticLoadBalancingV2::Listener
  #   Properties:
  #     Certificates: [ CertificateArn: !Ref DomainCertificateArn]
  #     DefaultActions:
  #       - Type: forward
  #         TargetGroupArn:
  #           Ref: AlbTargetGroupHttps
  #     LoadBalancerArn:
  #         Ref: Alb
  #     Port: 443
  #     Protocol: HTTPS

  AlbListenerHttp:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - Type: redirect
          RedirectConfig:
            Protocol: "HTTPS"
            Port: 443
            Host: "#{host}"
            Path: "/#{path}"
            Query: "#{query}"
            StatusCode: "HTTP_301"
      LoadBalancerArn:
        Ref: Alb
      Port: 80
      Protocol: HTTP

  AlbTargetGroupHttps:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckIntervalSeconds: 60
      UnhealthyThresholdCount: 10
      HealthCheckPath: /
      Name: !Sub ueh-${Tag}-target-group-https
      Port: !Ref DefaultAlbForwardPortHttps
      Protocol: HTTPS
      VpcId:
        Ref: VpcId

  AlbTargetGroupHttp:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckIntervalSeconds: 60
      UnhealthyThresholdCount: 10
      HealthCheckPath: /
      Name: !Sub ueh-${Tag}-target-group-http
      Port: !Ref DefaultAlbForwardPortHttp
      Protocol: HTTP
      VpcId:
        Ref: VpcId

  Alb:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: !Sub ${AWS::StackName}
      Scheme: internet-facing
      Subnets: [ !Ref Subnet01Id, !Ref Subnet02Id, !Ref Subnet03Id ]
      SecurityGroups: [ !Ref AlbSg ]
      Tags:
      - Key: Purpose
        Value: jupyterhub

  ControlPlaneSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Cluster communication with worker nodes
      VpcId: !Ref VpcId

  ControlPlaneSecurityGroupIngress:
    Type: AWS::EC2::SecurityGroupIngress
    DependsOn: NodeSecurityGroup
    Properties:
      Description: Allow pods to communicate with the cluster API Server
      GroupId: !Ref ControlPlaneSecurityGroup
      SourceSecurityGroupId: !Ref NodeSecurityGroup
      IpProtocol: tcp
      ToPort: 443
      FromPort: 443

  ControlPlaneEgressToNodeSecurityGroup:
    Type: AWS::EC2::SecurityGroupEgress
    DependsOn: NodeSecurityGroup
    Properties:
      Description: Allow the cluster control plane to communicate with worker Kubelet and pods
      GroupId: !Ref ControlPlaneSecurityGroup
      DestinationSecurityGroupId: !Ref NodeSecurityGroup
      IpProtocol: tcp
      FromPort: 1025
      ToPort: 65535

  ControlPlaneEgressToNodeSecurityGroupOn443:
    Type: AWS::EC2::SecurityGroupEgress
    DependsOn: NodeSecurityGroup
    Properties:
      Description: Allow the cluster control plane to communicate with pods running extension API servers on port 443
      GroupId: !Ref ControlPlaneSecurityGroup
      DestinationSecurityGroupId: !Ref NodeSecurityGroup
      IpProtocol: tcp
      FromPort: 443
      ToPort: 443

  EksControlPlaneRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - eks.amazonaws.com
          Action:
          - sts:AssumeRole
      Path: "/"
      ManagedPolicyArns:
      - arn:aws:iam::aws:policy/AmazonEKSClusterPolicy
      - arn:aws:iam::aws:policy/AmazonEKSServicePolicy
      RoleName: !Sub '${AWS::StackName}-eks-control-plane-role'

  EksCluster:
    Type: "AWS::EKS::Cluster"
    DependsOn:
    - EksControlPlaneRole
    - ControlPlaneSecurityGroup
    Properties:
      Name: !Sub "umsi-easy-hub-${Tag}-EksCluster"
      Version: "1.21"
      RoleArn: !Sub "arn:aws:iam::${AWS::AccountId}:role/${AWS::StackName}-eks-control-plane-role"
      ResourcesVpcConfig:
        SecurityGroupIds: [!Ref ControlPlaneSecurityGroup]
        SubnetIds: [!Ref Subnet01Id, !Ref Subnet02Id ]

  NodeInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: "/"
      Roles:
      - !Ref NodeInstanceRole

  NodeInstanceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - ec2.amazonaws.com
          Action:
          - sts:AssumeRole
      Path: "/"
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonEKSWorkerNodePolicy
        - arn:aws:iam::aws:policy/AmazonEKS_CNI_Policy
        - arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryReadOnly
        - arn:aws:iam::aws:policy/AmazonElasticFileSystemFullAccess
        # - !Ref NodeLoadbalancingPolicy
        - arn:aws:iam::aws:policy/AmazonS3FullAccess
      RoleName: !Sub 'umsi-easy-hub-${Tag}-eks-node-role'

  NodeLoadbalancingPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: "NodeLoadbalancing"
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          -
            Effect: "Allow"
            Action:
              - "elasticloadbalancing:*"
            Resource: "*"
      Roles:
        -
          Ref: NodeInstanceRole

  NodeSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for all nodes in the cluster
      VpcId:
        !Ref VpcId
      Tags:
      - Key: !Sub "kubernetes.io/cluster/umsi-easy-hub-${Tag}-EksCluster"
        Value: 'owned'

  NodeSecurityGroupMasterElbIngress:
    Type: AWS::EC2::SecurityGroupIngress
    DependsOn: NodeSecurityGroup
    Properties:
      Description: Allow master elb to communicate with nodes
      GroupId: !Ref NodeSecurityGroup
      SourceSecurityGroupId: !Ref AlbSg
      IpProtocol: '-1'
      FromPort: 0
      ToPort: 65535

  NodeSecurityGroupControlNodeIngress:
    Type: AWS::EC2::SecurityGroupIngress
    DependsOn: NodeSecurityGroup
    Properties:
      Description: Allow control node to communicate with nodes
      GroupId: !Ref NodeSecurityGroup
      SourceSecurityGroupId: !Ref ControlNodeSecurityGroup
      IpProtocol: '-1'
      FromPort: 0
      ToPort: 65535

  NodeSecurityGroupElbIngress:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      Description: Allow node to communicate with each other
      GroupId: !Ref NodeSecurityGroup
      SourceSecurityGroupId: !Ref NodeSecurityGroup
      IpProtocol: '-1'
      FromPort: 0
      ToPort: 65535

  NodeSecurityGroupFromControlPlaneIngress:
    Type: AWS::EC2::SecurityGroupIngress
    DependsOn: NodeSecurityGroup
    Properties:
      Description: Allow worker Kubelets and pods to receive communication from the cluster control plane
      GroupId: !Ref NodeSecurityGroup
      SourceSecurityGroupId: !Ref ControlPlaneSecurityGroup
      IpProtocol: tcp
      FromPort: 1025
      ToPort: 65535

  NodeSecurityGroupFromControlPlaneOn443Ingress:
    Type: AWS::EC2::SecurityGroupIngress
    DependsOn: NodeSecurityGroup
    Properties:
      Description: Allow pods running extension API servers on port 443 to receive communication from cluster control plane
      GroupId: !Ref NodeSecurityGroup
      SourceSecurityGroupId: !Ref ControlPlaneSecurityGroup
      IpProtocol: tcp
      FromPort: 443
      ToPort: 443

  NodeAsg:
    Type: AWS::AutoScaling::AutoScalingGroup
    DependsOn:
    - EksCluster
    Properties:
      DesiredCapacity: !Ref NodeAutoScalingGroupDesiredCapacity
      LaunchConfigurationName: !Ref NodeLaunchConfig
      MinSize: !Ref NodeAutoScalingGroupMinSize
      MaxSize: !Ref NodeAutoScalingGroupMaxSize
      VPCZoneIdentifier: [ !Ref Subnet01Id ]
      Tags:
      - Key: Purpose
        Value: !Ref BillingTag
        PropagateAtLaunch: 'true'
      - Key: Name
        Value: !Sub '${AWS::StackName}-node'
        PropagateAtLaunch: 'true'
      - Key: !Sub 'kubernetes.io/cluster/umsi-easy-hub-${Tag}-EksCluster'
        Value: 'owned'
        PropagateAtLaunch: 'true'
    UpdatePolicy:
      AutoScalingRollingUpdate:
        MaxBatchSize: '1'
        MinInstancesInService: !Ref NodeAutoScalingGroupDesiredCapacity
        PauseTime: 'PT5M'

  ScaleUpAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmDescription: Scale up if there is no available space for a user
      AlarmName: !Sub '${AWS::StackName}-scale-up'
      AlarmActions: [ !Ref ScaleOutPolicy ]
      ComparisonOperator: LessThanThreshold
      Dimensions:
        - Name: cluster
          Value: !Ref NodeAsg
      MetricName: available-space
      EvaluationPeriods: 1
      Period: 30
      Statistic: Minimum
      Threshold: 1
      Namespace: Custom

  ScaleOutPolicy:
    Type: AWS::AutoScaling::ScalingPolicy
    Properties:
      AutoScalingGroupName: !Ref NodeAsg
      Cooldown: 240
      PolicyType: SimpleScaling
      ScalingAdjustment: 1
      AdjustmentType: ChangeInCapacity

  NodeLaunchConfig:
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties:
      AssociatePublicIpAddress: 'true'
      IamInstanceProfile: !Ref NodeInstanceProfile
      ImageId: !Ref NodeImageId
      InstanceType: !Ref NodeInstanceType
      KeyName: !Ref KeyName
      SecurityGroups:
      - !Ref NodeSecurityGroup
      BlockDeviceMappings:
        - DeviceName: /dev/xvda
          Ebs:
            VolumeSize: !Ref NodeVolumeSize
            VolumeType: gp2
            DeleteOnTermination: true
      UserData:
        Fn::Base64:
          !Sub |
            #!/bin/bash
            set -o xtrace
            /etc/eks/bootstrap.sh "umsi-easy-hub-${Tag}-EksCluster" ${BootstrapArguments}
            /opt/aws/bin/cfn-signal --exit-code $? \
                     --stack  ${AWS::StackName} \
                     --resource NodeAsg  \
                     --region ${AWS::Region}

            cd /home/ec2-user/

            aws s3 cp s3://${ScriptBucket}/node_startup_script.sh node_startup_script.sh
            chmod +x node_startup_script.sh

            EFSID=${EFS}
            echo ${EFS} >> efsid_watch.txt
            echo $EFSID >> efsid_watch.txt
            sed -i "s/EFSIDREPLACE/$EFSID/g" node_startup_script.sh

            ./node_startup_script.sh "${AlbTargetGroupHttp}" "${AlbTargetGroupHttps}"

Outputs:

  Tag:
    Description: Tag
    Value: !Ref Tag

  EksName:
    Description: Name of EKS backplane
    Value: !Sub umsi-easy-hub-${Tag}-EksCluster

  NodeRoleArn:
    Description: ARN of node role
    Value: !GetAtt NodeInstanceRole.Arn

  Asg:
    Description: Name of the autoscaling group created
    Value: !Ref NodeAsg
